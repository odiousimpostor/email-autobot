#!/usr/bin/env python3
import os
import json
import imaplib
import email
import time
from openai import OpenAI

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
IMAP_HOST        = os.getenv('IMAP_HOST')
IMAP_PORT        = int(os.getenv('IMAP_PORT', 993))
IMAP_USER        = os.getenv('IMAP_USER')
IMAP_PASS        = os.getenv('IMAP_PASS')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
# –ü–∞–ø–∫–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (–¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
DRAFTS_FOLDER    = os.getenv('DRAFTS_FOLDER', 'Drafts')

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ email. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Å—å–º–æ, "
    "–æ–ø—Ä–µ–¥–µ–ª–∏ —Å—É—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ –¥–µ–ª—É —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞."
)

PROCESSED_FILE = 'processed_ids.json'
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç DeepSeek —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π SDK
client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

def load_processed():
    if os.path.exists(PROCESSED_FILE):
        with open(PROCESSED_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

def save_processed(ids):
    with open(PROCESSED_FILE, 'w', encoding='utf-8') as f:
        json.dump(ids, f, ensure_ascii=False, indent=2)

def fetch_unread(limit=5):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ `limit` –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º (–Ω–µ –º–µ–Ω—è–µ—Ç —Ñ–ª–∞–≥ UNSEEN).
    –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: (message_id, from, subject, body_text).
    """
    M = imaplib.IMAP4_SSL(IMAP_HOST, IMAP_PORT)
    M.login(IMAP_USER, IMAP_PASS)
    M.select('INBOX')
    _, data = M.search(None, 'UNSEEN')
    mids = data[0].split()[:limit]
    messages = []
    for mid in mids:
        _, md = M.fetch(mid, '(RFC822)')
        msg = email.message_from_bytes(md[0][1])
        # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
        body = ""
        for part in msg.walk():
            if part.get_content_type() == 'text/plain':
                body = part.get_payload(decode=True).decode(errors='ignore')
                break
        messages.append((mid.decode(), msg.get('From'), msg.get('Subject'), body))
    M.logout()
    return messages

def generate_reply(body, subject, sender):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ —É DeepSeek —á–µ—Ä–µ–∑ SDK.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ None, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞.
    """
    try:
        resp = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user",   "content": f"–¢–µ–º–∞: {subject}\n–û—Ç: {sender}\n\n{body}"}
            ],
            max_tokens=500,
            temperature=0.2,
            stream=False
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå DeepSeek error: {e}")
        return None

def create_draft_imap(to, subject, body):
    """
    –°–æ–∑–¥–∞—ë—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ø–∞–ø–∫–µ DRAFTS_FOLDER —á–µ—Ä–µ–∑ IMAP APPEND.
    """
    msg = f"To: {to}\r\nSubject: Re: {subject}\r\n\r\n{body}"
    M = imaplib.IMAP4_SSL(IMAP_HOST, IMAP_PORT)
    M.login(IMAP_USER, IMAP_PASS)
    # –§–ª–∞–≥ \Draft –ø–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
    date_time = imaplib.Time2Internaldate(time.time())
    M.append(DRAFTS_FOLDER, '\\Draft', date_time, msg.encode('utf-8'))
    M.logout()

def main():
    processed = load_processed()
    messages = fetch_unread()

    for mid, frm, subj, body in messages:
        if mid in processed:
            print(f"üîÅ {mid} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        print(f"‚úâÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ {mid}: ¬´{subj}¬ª –æ—Ç {frm}")
        draft = generate_reply(body, subj, frm)
        if not draft:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {mid}.")
            continue

        try:
            create_draft_imap(frm, subj, draft)
            print(f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {mid} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫—É ¬´{DRAFTS_FOLDER}¬ª.")
            processed.append(mid)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è {mid}: {e}")

    save_processed(processed)

if __name__ == "__main__":
    main()
