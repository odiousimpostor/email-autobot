#!/usr/bin/env python3
import os
import json
import imaplib
import time
from email import policy
from email.message import EmailMessage
from openai import OpenAI

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
IMAP_HOST        = os.getenv('IMAP_HOST')
IMAP_PORT        = int(os.getenv('IMAP_PORT', 993))
IMAP_USER        = os.getenv('IMAP_USER')
IMAP_PASS        = os.getenv('IMAP_PASS')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
# –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –û–±—ã—á–Ω–æ "Drafts" –∏–ª–∏ "[Gmail]/Drafts", –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
DRAFTS_FOLDER    = os.getenv('DRAFTS_FOLDER', 'Drafts')
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
PROCESSED_FILE   = 'processed_ids.json'

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ email. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Å—å–º–æ, "
    "–æ–ø—Ä–µ–¥–µ–ª–∏ —Å—É—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ –¥–µ–ª—É —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞."
)

# DeepSeek-–∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π SDK
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")


def load_processed():
    if os.path.exists(PROCESSED_FILE):
        with open(PROCESSED_FILE, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    return set()

def save_processed(processed_ids):
    with open(PROCESSED_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(processed_ids), f, ensure_ascii=False, indent=2)

def fetch_unread(limit=5):
    """
    –ë–µ—Ä—ë–º –¥–æ `limit` –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –Ω–æ –Ω–µ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ UNSEEN.
    PEEK –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ IMAP-—Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–º–µ—Ç–∏—Ç –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.
    """
    M = imaplib.IMAP4_SSL(IMAP_HOST, IMAP_PORT)
    M.login(IMAP_USER, IMAP_PASS)
    M.select('INBOX')
    typ, data = M.search(None, 'UNSEEN')
    mids = data[0].split()[:limit]
    result = []
    for mid in mids:
        # FETCH BODY.PEEK[] –≤–º–µ—Å—Ç–æ RFC822
        typ, msg_data = M.fetch(mid, '(BODY.PEEK[])')
        raw = msg_data[0][1]
        msg = EmailMessage(policy=policy.default)
        msg = msg.policy.message_factory(raw)
        # –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
        text = ""
        for part in msg.walk():
            if part.get_content_type() == 'text/plain':
                text = part.get_content()
                break
        result.append((mid.decode(), msg['From'], msg['Subject'], text))
    M.logout()
    return result

def generate_reply(body, subject, sender):
    """
    –ó–∞–ø—Ä–æ—Å –≤ DeepSeek —á–µ—Ä–µ–∑ SDK.
    """
    try:
        resp = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user",   "content": f"–¢–µ–º–∞: {subject}\n–û—Ç: {sender}\n\n{body}"}
            ],
            max_tokens=500,
            temperature=0.2,
            stream=False
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå DeepSeek error: {e}")
        return None

def create_draft_imap(to, subject, body):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º EmailMessage –∏ –∫–ª–∞–¥—ë–º –≤ –ø–∞–ø–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —á–µ—Ä–µ–∑ APPEND.
    """
    msg = EmailMessage()
    msg['From'] = IMAP_USER
    msg['To']   = to
    msg['Subject'] = f"Re: {subject}"
    msg.set_content(body)
    date_time = imaplib.Time2Internaldate(time.time())
    raw_bytes = msg.as_bytes()

    M = imaplib.IMAP4_SSL(IMAP_HOST, IMAP_PORT)
    M.login(IMAP_USER, IMAP_PASS)
    # –§–ª–∞–≥ \Draft –ø–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
    M.append(DRAFTS_FOLDER, '\\Draft', date_time, raw_bytes)
    M.logout()

def main():
    processed = load_processed()
    messages = fetch_unread()

    for mid, frm, subj, body in messages:
        if mid in processed:
            print(f"üîÅ –ü–∏—Å—å–º–æ {mid} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        print(f"‚úâÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {mid}: ¬´{subj}¬ª –æ—Ç {frm}")
        draft = generate_reply(body, subj, frm)
        if not draft:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {mid}.")
            continue

        try:
            create_draft_imap(frm, subj, draft)
            print(f"üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ {mid} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ¬´{DRAFTS_FOLDER}¬ª.")
            processed.add(mid)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è {mid}: {e}")

    save_processed(processed)

if __name__ == "__main__":
    main()
